buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.elasticsearch.gradle:build-tools:${elasticsearchVersion}"
    }
}

group = 'org.elasticsearch'
version = "$elasticsearchVersion"
description = 'elasticsearch-analysis-hanlp'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'elasticsearch.esplugin'

esplugin {
    name 'analysis-hanlp'
    description 'HanLP Analyzer for ElasticSearch'
    classname 'org.elasticsearch.plugin.analysis.hanlp.AnalysisHanLPPlugin'
    licenseFile = rootProject.file('LICENSE.txt')
    noticeFile = rootProject.file('NOTICE.txt')
}

jar {
    archiveBaseName.set(rootProject.name)
}

assemble {
    doLast {
        file("build/distributions/analysis-hanlp-${elasticsearchVersion}.zip").renameTo(file("build/distributions/${rootProject.name}-${elasticsearchVersion}.zip"))
        ant.checksum file: "build/distributions/${rootProject.name}-${elasticsearchVersion}.zip"
    }
}

configurations.all {
    resolutionStrategy {
        failOnVersionConflict()
        eachDependency { DependencyResolveDetails details ->
            if (details.requested.group == 'commons-codec') {
                details.useVersion('1.15')
            }
            if (details.requested.group == 'commons-logging') {
                details.useVersion('1.2')
            }
            if (details.requested.group == 'org.apache.httpcomponents' && details.requested.name == 'httpcore') {
                details.useVersion('4.4.16')
            }
        }
    }
}

repositories {
    mavenCentral()
    maven { url 'https://maven.aliyun.com/repository/public' }
}

dependencies {
    implementation 'com.hankcs:hanlp:portable-1.8.6'
    implementation 'commons-codec:commons-codec:1.15'
    implementation 'commons-logging:commons-logging:1.2'
    implementation 'org.apache.httpcomponents:httpclient:4.5.14'
    implementation 'org.apache.httpcomponents:httpcore:4.4.16'
}

test {
    systemProperty 'tests.security.manager', 'false'
}

// 生成 Javadoc JAR
task javadocJar(type: Jar) {
    dependsOn javadoc
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

// 生成源码 JAR
task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}